name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Changed Files
        id: changed-files
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(rs|go|sol|js|ts|py)$' || true)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: AI Review Changed Files
        if: steps.changed-files.outputs.files != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Or use: ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Example using OpenAI API (you'd need to implement the actual script)
          # This is pseudocode - you'd need to create the actual review script
          
          echo "Reviewing files with AI..."
          # python scripts/ai_review.py "${{ steps.changed-files.outputs.files }}"
          
          # Or use a pre-built action like:
          # - uses: coderabbitai/ai-pr-reviewer@latest
          # - uses: anc95/ChatGPT-CodeReview@main
      
      - name: Post Review Comments
        if: steps.changed-files.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            // Post AI review as PR comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## ðŸ¤– AI Code Review\n\nAI-powered analysis complete. [Results would go here]'
            })

  # ChainGuard Integration Example
  chainguard-analysis:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.pull_request.labels.*.name, 'smart-contract') ||
      contains(github.event.pull_request.labels.*.name, 'blockchain')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install ChainGuard
        run: |
          # Install from your releases
          wget https://github.com/KoushikGavini/ChainGuard/releases/latest/download/chainguard-linux-x64.tar.gz
          tar -xzf chainguard-linux-x64.tar.gz
          sudo mv chainguard /usr/local/bin/
      
      - name: Run ChainGuard Analysis
        run: |
          # Analyze Solana programs
          if [ -d "programs" ]; then
            chainguard analyze --solana programs/ --output-format json > analysis.json
          fi
          
          # Analyze Fabric chaincode
          if [ -d "chaincode" ]; then
            chainguard analyze chaincode/ --output-format json > analysis.json
          fi
      
      - name: Post Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('analysis.json')) {
              const results = JSON.parse(fs.readFileSync('analysis.json', 'utf8'));
              // Format and post results as PR comment
            } 